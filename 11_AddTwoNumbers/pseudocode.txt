We want to add the digits like in normal addition problems. If the result is less than 10, simply add the result to a new ListNode. However, if the result is greater than or equal to 10, take the digit in the 1's place and add that value to the previous ListNode's next field. Store the value in the 10s place somewhere so taht we can use carry it over to the next addition. We keep doing this until the longest linked list has all been checked. Since the nodes contain only single digits, the carryOver value is always 1 and the result value for that node will just be the first digit. Make sure to reset the carrover value once its been used. 


int carryOver = 0;
LinkedList<ListNode> list = new LinkedList<>();
ListNode dummyHead = new ListNode(0)
ListNode p = l1, q = l2, curr = dummHead;

while (p does not equal null OR q does not equal null)
	if (p == null)
		result = q.value + carryOver
		if (result < 10)
			curr.next = new ListNode(result)
			curr = curr.next;
			q = q.next
			carryOver = 0
		else
			curr.next = new ListNode(result % 10)
			carryOver++;
			curr = curr.next;
			q = q.next
			
	else if (q == null)
		result = p.value + carryOver
		if (result < 10)
			curr.next = new ListNode(result)
			curr = curr.next;
			p = p.next
			carrOver = 0
		else
			curr.next = new ListNode(result % 10)
			carryOver++
			curr = curr.next;
			p = p.next
			
	else
		int result = p.value + q.value + carryOver;
		if (result < 10)
			curr.next = new ListNode(result)
			curr = curr.next
			carrOver = 0	
			p = p.next
			q = q.next
		else 	
			curr.next = new ListNode(result % 10)
			curr = curr.next
			carrOver++
			p = p.next
			q = q.next
If (carrOver > 0)
	curr.next = new ListNode(carrOver);
return dummHead.next




LeetCode's Solution:
Initialize current node to dummy head of the returning list.
Initialize carry to 00.
Initialize pp and qq to head of l1l1 and l2l2 respectively.
Loop through lists l1l1 and l2l2 until you reach both ends.
Set xx to node pp's value. If pp has reached the end of l1l1, set to 00.
Set yy to node qq's value. If qq has reached the end of l2l2, set to 00.
Set sum = x + y + carrysum=x+y+carry.
Update carry = sum / 10carry=sum/10.
Create a new node with the digit value of (sum \bmod 10)(summod10) and set it to current node's next, then advance current node to next.
Advance both pp and qq.
Check if carry = 1carry=1, if so append a new node with digit 11 to the returning list.
Return dummy head's next node.

class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode dummyHead = new ListNode(0);
        ListNode p = l1, q = l2, curr = dummyHead;
        int carry = 0;
        while (p != null || q != null) {
            int x = (p != null) ? p.val : 0;
            int y = (q != null) ? q.val : 0;
            int sum = carry + x + y;
            carry = sum / 10;
            curr.next = new ListNode(sum % 10);
            curr = curr.next;
            if (p != null) p = p.next;
            if (q != null) q = q.next;
        }
        if (carry > 0) {
            curr.next = new ListNode(carry);
        }
        return dummyHead.next;
    }
}
		
	